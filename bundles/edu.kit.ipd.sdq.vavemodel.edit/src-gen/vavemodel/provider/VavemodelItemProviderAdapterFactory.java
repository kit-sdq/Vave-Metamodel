/**
 */
package vavemodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import vavemodel.util.VavemodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VavemodelItemProviderAdapterFactory extends VavemodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VavemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.Variant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantItemProvider variantItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.Variant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantAdapter() {
		if (variantItemProvider == null) {
			variantItemProvider = new VariantItemProvider(this);
		}

		return variantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.Constraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintsItemProvider constraintsItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.Constraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintsAdapter() {
		if (constraintsItemProvider == null) {
			constraintsItemProvider = new ConstraintsItemProvider(this);
		}

		return constraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.VariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationPointItemProvider variationPointItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.VariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationPointAdapter() {
		if (variationPointItemProvider == null) {
			variationPointItemProvider = new VariationPointItemProvider(this);
		}

		return variationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.VP_Constraint_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VP_Constraint_VPItemProvider vP_Constraint_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.VP_Constraint_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVP_Constraint_VPAdapter() {
		if (vP_Constraint_VPItemProvider == null) {
			vP_Constraint_VPItemProvider = new VP_Constraint_VPItemProvider(this);
		}

		return vP_Constraint_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Constraint_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Constraint_VPItemProvider v_Constraint_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Constraint_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Constraint_VPAdapter() {
		if (v_Constraint_VPItemProvider == null) {
			v_Constraint_VPItemProvider = new V_Constraint_VPItemProvider(this);
		}

		return v_Constraint_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Constraint_V} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Constraint_VItemProvider v_Constraint_VItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Constraint_V}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Constraint_VAdapter() {
		if (v_Constraint_VItemProvider == null) {
			v_Constraint_VItemProvider = new V_Constraint_VItemProvider(this);
		}

		return v_Constraint_VItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.Version} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionItemProvider versionItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.Version}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAdapter() {
		if (versionItemProvider == null) {
			versionItemProvider = new VersionItemProvider(this);
		}

		return versionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.DeltaModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeltaModuleItemProvider deltaModuleItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.DeltaModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeltaModuleAdapter() {
		if (deltaModuleItemProvider == null) {
			deltaModuleItemProvider = new DeltaModuleItemProvider(this);
		}

		return deltaModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.VP_Depends_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VP_Depends_VPItemProvider vP_Depends_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.VP_Depends_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVP_Depends_VPAdapter() {
		if (vP_Depends_VPItemProvider == null) {
			vP_Depends_VPItemProvider = new VP_Depends_VPItemProvider(this);
		}

		return vP_Depends_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.VP_Excludes_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VP_Excludes_VPItemProvider vP_Excludes_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.VP_Excludes_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVP_Excludes_VPAdapter() {
		if (vP_Excludes_VPItemProvider == null) {
			vP_Excludes_VPItemProvider = new VP_Excludes_VPItemProvider(this);
		}

		return vP_Excludes_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Depends_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Depends_VPItemProvider v_Depends_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Depends_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Depends_VPAdapter() {
		if (v_Depends_VPItemProvider == null) {
			v_Depends_VPItemProvider = new V_Depends_VPItemProvider(this);
		}

		return v_Depends_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Excludes_VP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Excludes_VPItemProvider v_Excludes_VPItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Excludes_VP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Excludes_VPAdapter() {
		if (v_Excludes_VPItemProvider == null) {
			v_Excludes_VPItemProvider = new V_Excludes_VPItemProvider(this);
		}

		return v_Excludes_VPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Depends_V} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Depends_VItemProvider v_Depends_VItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Depends_V}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Depends_VAdapter() {
		if (v_Depends_VItemProvider == null) {
			v_Depends_VItemProvider = new V_Depends_VItemProvider(this);
		}

		return v_Depends_VItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.V_Excludes_V} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected V_Excludes_VItemProvider v_Excludes_VItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.V_Excludes_V}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createV_Excludes_VAdapter() {
		if (v_Excludes_VItemProvider == null) {
			v_Excludes_VItemProvider = new V_Excludes_VItemProvider(this);
		}

		return v_Excludes_VItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.Cardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityItemProvider cardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.Cardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityAdapter() {
		if (cardinalityItemProvider == null) {
			cardinalityItemProvider = new CardinalityItemProvider(this);
		}

		return cardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link vavemodel.Change} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeItemProvider changeItemProvider;

	/**
	 * This creates an adapter for a {@link vavemodel.Change}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeAdapter() {
		if (changeItemProvider == null) {
			changeItemProvider = new ChangeItemProvider(this);
		}

		return changeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (variantItemProvider != null) variantItemProvider.dispose();
		if (constraintsItemProvider != null) constraintsItemProvider.dispose();
		if (variationPointItemProvider != null) variationPointItemProvider.dispose();
		if (vP_Constraint_VPItemProvider != null) vP_Constraint_VPItemProvider.dispose();
		if (v_Constraint_VPItemProvider != null) v_Constraint_VPItemProvider.dispose();
		if (v_Constraint_VItemProvider != null) v_Constraint_VItemProvider.dispose();
		if (versionItemProvider != null) versionItemProvider.dispose();
		if (deltaModuleItemProvider != null) deltaModuleItemProvider.dispose();
		if (vP_Depends_VPItemProvider != null) vP_Depends_VPItemProvider.dispose();
		if (vP_Excludes_VPItemProvider != null) vP_Excludes_VPItemProvider.dispose();
		if (v_Depends_VPItemProvider != null) v_Depends_VPItemProvider.dispose();
		if (v_Excludes_VPItemProvider != null) v_Excludes_VPItemProvider.dispose();
		if (v_Depends_VItemProvider != null) v_Depends_VItemProvider.dispose();
		if (v_Excludes_VItemProvider != null) v_Excludes_VItemProvider.dispose();
		if (cardinalityItemProvider != null) cardinalityItemProvider.dispose();
		if (changeItemProvider != null) changeItemProvider.dispose();
	}

}
